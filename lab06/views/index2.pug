//- @author Stanisław Polak <polak@agh.edu.pl>

doctype html
html(lang='en')
    head
        meta(charset='UTF-8')
        title Form
        link(rel="stylesheet", href="https://unpkg.com/mocha/mocha.css")
        style.
            table {
                width: 100%;
            }
            td {
                border: 1px solid #000; 
                padding: 15px;
                text-align: left;
            }
            th {
                background-color: #04AA6D;
                color: white;
            }
        script.
            /**************************************************************************************/
            /* Function that retrieves the content of one of the selected text fields of the form */
            /**************************************************************************************/
            function getName(http_method) {
                let name = '';

                if (http_method === 'GET') {
                    name = document.getElementById(`name_GET`).value;
                } else if (http_method === 'POST') {
                    name = document.getElementById(`name_POST`).value;
                }

                return name;
            }

             function displayResult(response_type, result) {
                // Funkcja wyświetlająca wyniki w elemencie div o identyfikatorze "result-container"
                const resultContainer = document.getElementById('result-container');
                const resultDiv = document.createElement('div');
                resultDiv.innerHTML = `<strong>${response_type.toUpperCase()}:</strong> ${JSON.stringify(result)}`;
                resultContainer.appendChild(resultDiv);
            }

            function getTime(europe_city) {
                return new Promise((resolve, reject) => {
                    const url = `http://worldtimeapi.org/api/timezone/Europe/${europe_city}`;
                    
                    // Wykonawca obietnicy (Fetch API)
                    fetch(url)
                        .then(response => {
                            if (response.ok) {
                                return response.json();
                            } else {
                                throw new Error(`City not found: ${response.statusText}`);
                            }
                        })
                        .then(data => resolve(data))
                        .catch(error => reject(error.message));
                });
            }

            function getTimeAndDisplayResult() {
                const cityInput = document.getElementById('city');
                const resultContainer = document.getElementById('result-container');

                const city = cityInput.value.trim();

                if (city === '') {
                    const errorDiv = document.createElement('div');
                    errorDiv.innerHTML = '<strong>Error:</strong> Please enter a European city.';
                    resultContainer.appendChild(errorDiv);
                    return;
                }

                getTime(city)
                    .then(data => {
                        const resultDiv = document.createElement('div');
                        resultDiv.innerHTML = `<strong>Current Time in ${city}:</strong> ${data.datetime}`;
                        resultContainer.appendChild(resultDiv);
                    })
                    .catch(error => {
                        const errorDiv = document.createElement('div');
                        errorDiv.innerHTML = `<strong>Error:</strong> ${error}`;
                        resultContainer.appendChild(errorDiv);
                    });
            }

            
            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server using AJAX           */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "document"]                                       */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            function requestAJAX(http_method, response_type, name, show_alert=false) {
                //-----------------------------------------------
                // Create an object representing the request to the web server — see https://developer.mozilla.org/docs/Web/API/XMLHttpRequest
                //-----------------------------------------------
                const xhr = new XMLHttpRequest();

                //-----------------------
                // Observers registration
                //-----------------------

                // If the request was successful
                xhr.addEventListener("load", function (evt) {                          
                    if (xhr.status === 200) {
                        console.group('AJAX');
                        console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);
                        console.log(xhr.response);
                        console.groupEnd();
                        if(show_alert){
                            displayResult(response_type, xhr.response); // Dodanie wywołania funkcji displayResult
                            results.set(`ajax ${http_method} ${response_type}`, xhr.response);
                            dispatchEvent(received);
                        }
                        else { 
                            results.set(`ajax ${http_method} ${response_type}`, xhr.response);
                            dispatchEvent(received); 
                        }
                    }
                });

                // If the request was failed
                xhr.addEventListener("error", function (evt) {
                    window.alert('There was a problem with this request.');
                });

                //--------------------------------------------------------------------------
                // Configuration and execution of the (asynchronous) query to the web server
                //--------------------------------------------------------------------------
                xhr.responseType = response_type;  // Type of data received by the 'load' observer
                xhr.withCredentials = true; // Do not modify or remove
                xhr.open(http_method, `http://localhost:8000/submit?name=${encodeURIComponent(name)}`, true);

                //****************************************************************************************
                // What is the acceptable data type - the server part should return data of the given type
                // Default value: '*/*'
                //****************************************************************************************
                switch(response_type){
                    case 'json':
                        xhr.setRequestHeader('Accept', 'application/json');
                        break;
                    case 'document':
                        xhr.setRequestHeader('Accept', 'application/xml');
                        break;
                }  
                
                xhr.send(null);
            }

            /**************************************************************************************/
            /* Function that performs (asynchronous) query to the web server  usingFetch API      */
            /**************************************************************************************/
            /* http_method ∈ ["GET", "POST"]                                                      */ 
            /* response_type ∈ ["text", "json", "xml"]                                            */ 
            /* name - Contents of the form's text box - data that needs to be sent asynchronously */
            /**************************************************************************************/
            async function requestFetchAPI(http_method, response_type, name, show_alert = false) {
                let accept = '*/*';

                switch (response_type) {
                    case 'json':
                        accept = 'application/json';
                        break;
                    case 'xml':
                        accept = 'application/xml';
                        break;
                }

                const url = `http://localhost:8000/submit?name=${encodeURIComponent(name)}`;

                let fetchConfig = {
                    method: http_method,
                    credentials: 'include',
                    headers: {
                        Accept: accept,
                    },
                };

                if (http_method === 'POST') {
                    fetchConfig.headers['Content-Type'] = 'application/x-www-form-urlencoded';
                    fetchConfig.body = `name=${encodeURIComponent(name)}`;
                }

                try {
                    const response = await fetch(url, fetchConfig);

                    if (!response.ok) {
                        throw new Error(response.statusText);
                    }

                    console.group('Fetch API');
                    console.log(`HTTP method ⟶\t\t${http_method}\nResponse type ⟶\t${response_type}\nInput data ⟶\t\t${name}`);
                    let result;

                    if (response_type === 'json') {
                        result = await response.json();
                    } else if (response_type === 'document') {
                        const text = await response.text();
                        result = new DOMParser().parseFromString(text, 'application/xml');
                    } else {
                        result = await response.text();
                    }

                    console.log(result);
                    console.groupEnd();

                    if (show_alert) {
                        displayResult(response_type, result);
                        results.set(`fetch ${http_method} ${response_type}`, result);
                        dispatchEvent(received);
                    } else {
                        results.set(`fetch ${http_method} ${response_type}`, result);
                        dispatchEvent(received);
                    }
                } catch (error) {
                    window.alert(error.message);
                }
            }

        script(src="https://unpkg.com/mocha/mocha.js") 
        script(type="module").
            import { expect } from 'https://unpkg.com/chai/chai.js' 
            window.expect = expect
    body
        div#result-container
        script(class="mocha-init").
            mocha.setup('bdd');
            mocha.checkLeaks(); 
        main
        table  
        tr 
            th(colspan='3', style=' background-color: #04556D;') Get Time for European
        tr
            th City
            td 
                form(id="time-form")
                    input(type="text", id="city", name="city", placeholder="Enter European City")
                    button(type="button", onclick="getTimeAndDisplayResult()") Get Time
            table
                tr
                    th  
                    th GET
                    th POST
                tr 
                    th(colspan='3', style=' background-color: #04556D;') Without AJAX and Fetch API
                tr
                    th HTTP
                    td 
                        form(action="http://localhost:8000/submit", method="GET")
                            label(for="name_GET") Your name
                            input(type="text", id="name_GET", name="name")
                            br
                            input(type="submit", value="text")
                    td 
                        form(action="http://localhost:8000/submit", method="POST") 
                            label(for="name_POST") Your name
                            input(type="text", id="name_POST", name="name")
                            br
                            input(type="submit", value="text")
                tr 
                    th(colspan='3', style=' background-color: #04556D;')  Asynchronous requests
                tr 
                    th AJAX 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "document"]
                                
                                button(onclick=`console.clear() ; requestAJAX("${method}","${type}", getName('${method}'), true)`) #{type}
                tr
                    th Fetch API 
                    each method in ["GET", "POST"]
                        td
                            each type in ["text", "json", "xml"]
                                button(onclick=`console.clear() ; requestFetchAPI("${method}","${type}", getName('${method}'), true)`) #{type}
        h1 Unit tests
        button(onclick='window.location.reload();') Restart
        div(id="mocha")
        script.
            const name = 'John Doe ą/?:@&=+$#';

            if(window.location.port == 8000) { 
                window.addEventListener("load", (event) => {
                    for(let method of ["GET","POST"]){
                        for(let type of ["text", "json", "document"])
                            requestAJAX(method, type, name);                        
                        for(let type of ["text", "json", "xml"])
                            requestFetchAPI(method, type, name);
                    }
                })
            };
        script(class="mocha-exec").
            //****************************************************************************************
            // Unit tests
            //****************************************************************************************
            var results = new Map();
            var received = new Event('received');
            var test_executed = false;

            function decodeHtml(html) {
                var txt = document.createElement("textarea");
                txt.innerHTML = html;

                return txt.value;
            }

            addEventListener('received', (e) => {
                if(!test_executed && results.size === 12){
                    const parser = new DOMParser();
                    const xml_document= parser.parseFromString("<welcome>Hello 'John Doe ą/?:@&amp;=+$#'</welcome>","text/xml");

                    describe('AJAX requests', function() {
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','text')`, function() {
                            expect(results.get('ajax GET text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','json')`, function() {
                            expect(results.get('ajax GET json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('GET','document')`, function() {
                            expect(results.get('ajax GET document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','text')`, function() {
                            expect(results.get('ajax POST text')).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','json')`, function() {
                            expect(results.get('ajax POST json')).to.eql({welcome: `Hello '${name}'`});
                        });
                        it(`Returns "Hello '${name}'" for requestAJAX('POST','document')`, function() {
                            expect(results.get('ajax POST document').documentElement.firstChild.data).to.equal(xml_document.documentElement.firstChild.data);
                        });
                    });
            
                    describe('Fetch API requests', function() {   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','text')`, async function() {
                            const result  = await results.get('fetch GET text')
                            expect(result).to.equal(`Hello '${name}'`);
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','json')`, async function() {
                            const result  = await results.get('fetch GET json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('GET','xml')`, async function() {
                            const result  = await results.get('fetch GET xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        }); 
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','text')`, async function() {
                            const result  = await results.get('fetch POST text')
                            expect(result).to.equal(`Hello '${name}'`);                   
                        });
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','json')`, async function() {
                            const result  = await results.get('fetch POST json')
                            expect(result).to.eql({welcome: `Hello '${name}'`});
                        });   
                        it(`Returns "Hello '${name}'" for requestFetchAPI('POST','xml')`, async function() {
                            const result  = await results.get('fetch POST xml');
                            expect(decodeHtml(result)).to.equal(`<welcome>Hello '${name}'</welcome>`);
                        });    
                    });     
                    
                    mocha.run();
                    test_executed = true;
                }
            });